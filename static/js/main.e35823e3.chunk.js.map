{"version":3,"sources":["Components/ResultValue/ResultValue.module.css","AlternativeCounter/ResultValue/ResultValue.module.css","Components/Button/Button.module.css","Components/Input/Input.module.css","AlternativeCounter/Button/Button.module.css","AlternativeCounter/Input/Input.module.css","Components/ResultValue/ResultValue.tsx","Components/Button/Button.tsx","Components/Input/Input.tsx","AlternativeCounter/ResultValue/ResultValue.tsx","AlternativeCounter/Button/Button.tsx","AlternativeCounter/Input/Input.tsx","AlternativeCounter/AppWithMenu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ResultValue","props","className","value","maxValue","s","resultValue","Button","button","onClick","disabled","name","minValue","Input","addValue","input","type","onChange","e","currentTarget","onBlur","onKeyPress","key","button1","input1","AppWithMenu","useState","setValue","setMaxValue","setMinValue","error","setError","showMenu","setShowMenu","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","maxValueAsString","newMaxValue","minValueAsString","newMinValue","errorAsString","newError","setItem","stringify","setHandler","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e35823e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultValue\":\"ResultValue_resultValue__qSgxy\",\"maxValue\":\"ResultValue_maxValue__3befK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"resultValue\":\"ResultValue_resultValue__1ctfp\",\"maxValue\":\"ResultValue_maxValue__2cUoB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__638sD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3UJAQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button1\":\"Button_button1__3312D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input1\":\"Input_input1__3x86V\"};","import React from \"react\";\r\nimport s from './ResultValue.module.css'\r\n\r\n\r\nexport type ResultValuePropsType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\nexport const ResultValue = (props: ResultValuePropsType) => {\r\n    return (\r\n        <div className={props.value >= props.maxValue ? s.maxValue : s.resultValue}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport s from './Button.module.css'\r\n\r\nexport type ButtonPropsType = {\r\n    name: 'inc' | 'reset'\r\n    onClick: () => void\r\n    value: number\r\n    maxValue: number\r\n    minValue: number\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n\r\n    const onClickButtonHandler = () => {\r\n        props.onClick()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className={s.button}\r\n                onClick={onClickButtonHandler}\r\n                disabled={props.value >= props.maxValue && props.name === 'inc' || props.value === props.minValue && props.name === 'reset'}\r\n            >\r\n                {props.name}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './Input.module.css'\r\n\r\ntype InputPropsType = {\r\n    name: 'minValue' | 'maxValue'\r\n    addValue: (value: number) => void\r\n    value: number\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n\r\n\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value < 0) {\r\n            return\r\n        }\r\n        props.addValue(+e.currentTarget.value)\r\n    }\r\n\r\n    const addValue = () => {\r\n        props.addValue(props.value)\r\n    }\r\n    const onBlurHandler = () => {\r\n        addValue()\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addValue()\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <input\r\n            className={s.input}\r\n            type='number'\r\n            value={props.value}\r\n            onChange={onChangeInputHandler}\r\n            onBlur={onBlurHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n        />\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from './ResultValue.module.css'\r\n\r\n\r\nexport type ResultValuePropsType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\n\r\nexport const ResultValue = (props: ResultValuePropsType) => {\r\n    return (\r\n        <div className={props.value >= props.maxValue ? s.maxValue : s.resultValue}>\r\n            {props.value}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './Button.module.css'\r\n\r\nexport type ButtonPropsType = {\r\n    name: 'inc' | 'reset' | 'set'\r\n    onClick: () => void\r\n    value: number\r\n    maxValue: number\r\n    minValue: number\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n\r\n    const onClickButtonHandler = () => {\r\n        props.onClick()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className={s.button1}\r\n                onClick={onClickButtonHandler}\r\n                disabled={props.value >= props.maxValue && props.name === 'inc' || props.value === props.minValue && props.name === 'reset'}\r\n            >\r\n                {props.name}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './Input.module.css'\r\n\r\ntype InputPropsType = {\r\n    name: 'minValue' | 'maxValue'\r\n    addValue: (value: number) => void\r\n    value: number\r\n}\r\n\r\nexport const Input = (props: InputPropsType) => {\r\n\r\n\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (+e.currentTarget.value < 0) {\r\n            return\r\n        }\r\n        props.addValue(+e.currentTarget.value)\r\n    }\r\n\r\n    const addValue = () => {\r\n        props.addValue(props.value)\r\n    }\r\n    const onBlurHandler = () => {\r\n        addValue()\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addValue()\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <input\r\n            className={s.input1}\r\n            type='number'\r\n            value={props.value}\r\n            onChange={onChangeInputHandler}\r\n            onBlur={onBlurHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n        />\r\n    </div>\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './App1.css';\r\nimport {ResultValue} from './ResultValue/ResultValue';\r\nimport {Button} from './Button/Button';\r\nimport {Input} from './Input/Input';\r\n\r\n\r\nfunction AppWithMenu() {\r\n\r\n    const [value, setValue] = useState(0)\r\n    const [maxValue, setMaxValue] = useState(5)\r\n    const [minValue, setMinValue] = useState(0)\r\n    const [error, setError] = useState('')\r\n    const [showMenu, setShowMenu] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        let valueAsString = localStorage.getItem('counterValue1')\r\n        if (valueAsString) {\r\n            let newValue = JSON.parse(valueAsString)\r\n            setValue(newValue)\r\n        }\r\n        let maxValueAsString = localStorage.getItem('maxValue1')\r\n        if (maxValueAsString) {\r\n            let newMaxValue = JSON.parse(maxValueAsString)\r\n            setMaxValue(newMaxValue)\r\n        }\r\n        let minValueAsString = localStorage.getItem('minValue1')\r\n        if (minValueAsString) {\r\n            let newMinValue = JSON.parse(minValueAsString)\r\n            setMinValue(newMinValue)\r\n        }\r\n        let errorAsString = localStorage.getItem('error1')\r\n        if (errorAsString) {\r\n            let newError = JSON.parse(errorAsString)\r\n            setError(newError)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('counterValue', JSON.stringify(value))\r\n    }, [value])\r\n    useEffect(() => {\r\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n    }, [maxValue])\r\n    useEffect(() => {\r\n        localStorage.setItem('minValue', JSON.stringify(minValue))\r\n    }, [minValue])\r\n    useEffect(() => {\r\n        localStorage.setItem('error', JSON.stringify(error))\r\n    }, [error])\r\n\r\n\r\n    const incHandler = () => {\r\n        setValue(value + 1)\r\n    }\r\n    const resetHandler = () => {\r\n        setValue(minValue)\r\n    }\r\n    const setHandler = () => {\r\n        setShowMenu(!showMenu)\r\n    }\r\n    const setNewMinValue = (newMinValue: number) => {\r\n        if (newMinValue >= maxValue) {\r\n            setError('Incorrect value!!!')\r\n        } else {\r\n            setError('')\r\n        }\r\n        setValue(newMinValue)\r\n        setMinValue(newMinValue)\r\n\r\n    }\r\n    const setNewMaxValue = (newMaxValue: number) => {\r\n        if (newMaxValue <= minValue) {\r\n            setError('Incorrect value!!!')\r\n        } else {\r\n            setError('')\r\n        }\r\n        setMaxValue(newMaxValue)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"counter1\">\r\n                <div className={showMenu ? 'noneStyle1' : ''}>\r\n                <div className=\"resultValue1\">\r\n                    <ResultValue\r\n                        value={value}\r\n                        maxValue={maxValue}\r\n                    />\r\n                </div>\r\n                <div className=\"buttons1\">\r\n                    <Button name='inc'\r\n                            onClick={incHandler}\r\n                            value={value}\r\n                            maxValue={maxValue}\r\n                            minValue={minValue}\r\n                    />\r\n                    <Button\r\n                        name='set'\r\n                        onClick={setHandler}\r\n                        value={value}\r\n                        maxValue={maxValue}\r\n                        minValue={minValue}\r\n                    />\r\n                    <Button name='reset'\r\n                            onClick={resetHandler}\r\n                            value={value}\r\n                            maxValue={maxValue}\r\n                            minValue={minValue}\r\n                    />\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div className={showMenu ? 'inputsMenu1' : 'noneStyle1'}>\r\n                <div className='message1'>Enter a value:</div>\r\n                <div className='minMaxValue1'>MinValue</div>\r\n                <div className='input1'>\r\n                    <Input\r\n                        name='minValue'\r\n                        addValue={setNewMinValue}\r\n                        value={minValue}\r\n                    />\r\n                </div>\r\n                <div className='minMaxValue'>MaxValue</div>\r\n                <div className='input'>\r\n                    <Input\r\n                        name='maxValue'\r\n                        addValue={setNewMaxValue}\r\n                        value={maxValue}\r\n                    />\r\n                </div>\r\n                <div className='error1'>{error}</div>\r\n                <Button\r\n                    name='set'\r\n                    onClick={setHandler}\r\n                    value={value}\r\n                    maxValue={maxValue}\r\n                    minValue={minValue}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n        ;\r\n}\r\n\r\n\r\nexport default AppWithMenu;\r\n","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport {ResultValue} from \"./Components/ResultValue/ResultValue\";\r\nimport {Button} from \"./Components/Button/Button\";\r\nimport {Input} from \"./Components/Input/Input\";\r\nimport AppWithMenu from \"./AlternativeCounter/AppWithMenu\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const [value, setValue] = useState(0)\r\n    const [maxValue, setMaxValue] = useState(5)\r\n    const [minValue, setMinValue] = useState(0)\r\n    const [error, setError] = useState('')\r\n\r\n    useEffect(() => {\r\n        let valueAsString = localStorage.getItem('counterValue')\r\n        if (valueAsString) {\r\n            let newValue = JSON.parse(valueAsString)\r\n            setValue(newValue)\r\n        }\r\n        let maxValueAsString = localStorage.getItem('maxValue')\r\n        if (maxValueAsString) {\r\n            let newMaxValue = JSON.parse(maxValueAsString)\r\n            setMaxValue(newMaxValue)\r\n        }\r\n        let minValueAsString = localStorage.getItem('minValue')\r\n        if (minValueAsString) {\r\n            let newMinValue = JSON.parse(minValueAsString)\r\n            setMinValue(newMinValue)\r\n        }\r\n        let errorAsString = localStorage.getItem('error')\r\n        if (errorAsString) {\r\n            let newError = JSON.parse(errorAsString)\r\n            setError(newError)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        localStorage.setItem('counterValue', JSON.stringify(value))\r\n    }, [value])\r\n    useEffect(() => {\r\n        localStorage.setItem('maxValue', JSON.stringify(maxValue))\r\n    }, [maxValue])\r\n    useEffect(() => {\r\n        localStorage.setItem('minValue', JSON.stringify(minValue))\r\n    }, [minValue])\r\n    useEffect(() => {\r\n        localStorage.setItem('error', JSON.stringify(error))\r\n    }, [error])\r\n\r\n\r\n    const incHandler = () => {\r\n        setValue(value + 1)\r\n    }\r\n    const resetHandler = () => {\r\n        setValue(minValue)\r\n    }\r\n    const setNewMinValue = (newMinValue: number) => {\r\n        if (newMinValue >= maxValue) {\r\n            setError('Incorrect value!!!')\r\n        } else {\r\n            setError('')\r\n        }\r\n        setValue(newMinValue)\r\n        setMinValue(newMinValue)\r\n\r\n    }\r\n    const setNewMaxValue = (newMaxValue: number) => {\r\n        if (newMaxValue <= minValue) {\r\n            setError('Incorrect value!!!')\r\n        } else {\r\n            setError('')\r\n        }\r\n        setMaxValue(newMaxValue)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"counter\">\r\n                <div className=\"resultValue\">\r\n            <ResultValue\r\n                value={value}\r\n                maxValue={maxValue}\r\n            />\r\n                </div>\r\n            <div className=\"buttons\">\r\n            <Button name='inc'\r\n                    onClick={incHandler}\r\n                    value={value}\r\n                    maxValue={maxValue}\r\n                    minValue={minValue}\r\n            />\r\n            <Button name='reset'\r\n                    onClick={resetHandler}\r\n                    value={value}\r\n                    maxValue={maxValue}\r\n                    minValue={minValue}\r\n            />\r\n            </div>\r\n            </div>\r\n            <div className='inputsMenu'>\r\n                <div className='message'>Enter a value: </div>\r\n                <div className='minMaxValue'>MinValue</div>\r\n                <div className='input'>\r\n            <Input\r\n                name='minValue'\r\n                addValue={setNewMinValue}\r\n                value={minValue}\r\n            />\r\n                </div>\r\n                <div className='minMaxValue'>MaxValue</div>\r\n                <div className='input'>\r\n            <Input\r\n                name='maxValue'\r\n                addValue={setNewMaxValue}\r\n                value={maxValue}\r\n            />\r\n                </div>\r\n            <div className='error'>{error}</div>\r\n            </div>\r\n            <AppWithMenu/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n    <App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}